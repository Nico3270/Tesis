from scipy.interpolate import lagrange, interp1d
import matplotlib.pyplot as plt
p = ""
resultado = 0
#Función tipo de terreno
def tipo_terreno(num):
    if num < 3:
        return "Terreno Plano"
    elif num < 6:
        return "Terreno Ondulado"
    elif num < 9:
        return "Terreno Montañoso"
    else:
        
        return "Terreno Escarpado"


#Función interpolación normal
def interpolacion(x,y,z):
    p = lagrange(x,y)
    resultado = (z)
    return round(p(z),3)
    
def interpolacionp(x,y,z):
    y_interp = interp1d(x, y,fill_value="extrapolate")
    resultado = float(y_interp(z))
    return round(resultado,3)

#Función limite inferior y superior tabla 2
def intervalos_2(num):
    inf = 0
    sup = 0
    list = [50,60,70,80,90,100]
    for x in list:
        if num - x >=0 and num - x <= 10:
            inf = x
            sup= inf + int((num-x)+(10-(num-x)))
    return(inf,sup)

#Función limite inferior y superior tabla 1
def intervalos_1(num):
    inf = 0
    sup = 0
    list = [0,1,2,3,4,5,6,7,8,9,10,11,12]
    for x in list:
        if num - x >=0 and num - x <= 1:
            inf = x
            sup= inf + int((num-x)+(1-(num-x)))
    return(inf,sup)

#Función limite inferior y superior tabla 9
def intervalos(num):
    inf = 0
    sup = 0
    list = [10,20,30,40,50,60,70,80,90]
    for x in list:
        if num - x >=0 and num - x <= 10:
            inf = x
            sup= inf + int((num-x)+(10-(num-x)))
    return(inf,sup)
    
#Funcion interpolacion compuesta Tabla 1
def inter_compuesta_1(p_promedio, tab1x, tab_1,lp):
    if p_promedio < 1 and lp < 2:
        return 0.995
    else:
        inf = intervalos_1(p_promedio)[0]
        sup = intervalos_1(p_promedio)[1]
        inf_int = interpolacionp(tab1x,tab_1.get(inf),lp)
        inf_sup = interpolacionp(tab1x,tab_1.get(sup),lp)
        list_inf = [inf,sup]
        list_sup =[inf_int, inf_sup]
        return interpolacionp(list_inf,list_sup,p_promedio)

#Función interpolación compuesta Tabla 2
def inter_compuesta_2(d_sentido, tab2x, tab_2,p_no_rebase):
    inf = intervalos_2(d_sentido)[0]
    sup = intervalos_2(d_sentido)[1]
    inf_int = interpolacionp(tab2x,tab_2.get(inf),p_no_rebase)
    inf_sup = interpolacionp(tab2x,tab_2.get(sup),p_no_rebase)
    list_inf = [inf,sup]
    list_sup =[inf_int, inf_sup]
    return interpolacionp(list_inf,list_sup,d_sentido)

#Función interpolación compuesta Tabla 3
def inter_compuesta3(tab_3x, tab_3, a_berma, a_carril):
    if a_berma >= 1.8:
        return 1.0
    val1 = interpolacionp(tab_3x, tab_3.get(0),a_carril)
    val2 =interpolacionp(tab_3x, tab_3.get(0.5),a_carril)
    val3 =interpolacionp(tab_3x, tab_3.get(1),a_carril)
    val4 =interpolacionp(tab_3x, tab_3.get(1.2),a_carril)
    val5 =interpolacionp(tab_3x, tab_3.get(1.5),a_carril)
    val6 = interpolacionp(tab_3x, tab_3.get(1.8),a_carril)
    list_inf = [0,0.5,1,1.2,1.5,1.8]
    list_sup = [val1,val2,val3,val4,val5,val6]
    return interpolacionp(list_inf,list_sup,a_berma)

#Funcion interpolacion compuesta Tabla 4
def inter_compuesta4(tabla_4x, tabla4, p_promedio, p_pesados,l_sector):
    p_inferior = intervalos_1(p_promedio)[0]
    inter_pen_inf1 = interpolacion(tabla_4x, tabla_4[p_inferior].get(0.5),p_pesados)
    inter_pen_inf2 = interpolacion(tabla_4x, tabla_4[p_inferior].get(1),p_pesados)
    inter_pen_inf3 = interpolacion(tabla_4x, tabla_4[p_inferior].get(1.5),p_pesados)
    inter_pen_inf4 = interpolacion(tabla_4x, tabla_4[p_inferior].get(2),p_pesados)
    inter_pen_inf5 = interpolacion(tabla_4x, tabla_4[p_inferior].get(3),p_pesados)
    inter_pen_inf6 = interpolacion(tabla_4x, tabla_4[p_inferior].get(4),p_pesados)
    inter_pen_inf7 = interpolacion(tabla_4x, tabla_4[p_inferior].get(5),p_pesados)
    lista_1 = [0.5,1,1.5,2,3,4,5]
    lista_2 = [inter_pen_inf1, inter_pen_inf2, inter_pen_inf3, inter_pen_inf4,inter_pen_inf5,inter_pen_inf6,inter_pen_inf7]
    final1 = interpolacion(lista_1, lista_2, l_sector)

    p_superior = intervalos_1(p_promedio)[1]
    inter_pen_inf1 = interpolacion(tabla_4x, tabla_4[p_superior].get(0.5),p_pesados)
    inter_pen_inf2 = interpolacion(tabla_4x, tabla_4[p_superior].get(1),p_pesados)
    inter_pen_inf3 = interpolacion(tabla_4x, tabla_4[p_superior].get(1.5),p_pesados)
    inter_pen_inf4 = interpolacion(tabla_4x, tabla_4[p_superior].get(2),p_pesados)
    inter_pen_inf5 = interpolacion(tabla_4x, tabla_4[p_superior].get(3),p_pesados)
    inter_pen_inf6 = interpolacion(tabla_4x, tabla_4[p_superior].get(4),p_pesados)
    inter_pen_inf7 = interpolacion(tabla_4x, tabla_4[p_superior].get(5),p_pesados)
    lista_3 = [0.5,1,1.5,2,3,4,5]
    lista_4 = [inter_pen_inf1, inter_pen_inf2, inter_pen_inf3, inter_pen_inf4,inter_pen_inf5,inter_pen_inf6,inter_pen_inf7]
    final2 = interpolacion(lista_3, lista_4, l_sector)
    datos = [p_inferior, p_superior]
    datos_1 = [final1, final2]
    return interpolacion(datos, datos_1, p_promedio)

#Funcion interpolacion Tabla 5
def inter_tabla5(tab_5,tab_5x,tab_51,tab_51x,cap):
    if cap <= 1200:
        return interpolacionp(tab_5, tab_5x, cap)
    else:
        return interpolacionp(tab_51, tab_51x, cap)

#Funcion interpolación compuesta tabla 6
def inter_compuesta6(tab_6x, tab_6, p_promedio,l_sector):
    inf = intervalos_1(p_promedio)[0]
    sup = intervalos_1(p_promedio)[1]
    int_1 = interpolacionp(tab_6x, tab_6.get(inf), l_sector)
    int_2 = interpolacionp(tab_6x, tab_6.get(sup), l_sector)
    datos_1 = [inf,sup]
    datos_2 = [int_1, int_2]
    return interpolacionp(datos_1, datos_2, p_promedio)

#Funcion interpolacion compuesta tabla 8
def inter_compuesta8(tab_8x, tab8, a_carril, a_berma):
    if a_berma <= 1.8:
        int_1 = interpolacion(tab_8x, tab8.get(1.8), a_carril)
        int_2 = interpolacion(tab_8x, tab8.get(1.5), a_carril)
        int_3 = interpolacion(tab_8x, tab8.get(1.2), a_carril)
        int_4 = interpolacion(tab_8x, tab8.get(1), a_carril)
        int_5 = interpolacion(tab_8x, tab8.get(0.5), a_carril)
        int_6 = interpolacion(tab_8x, tab8.get(0), a_carril)
        datos_1 = [1.8,1.5,1.2,1,0.5,0]
        datos_2 = [int_1,int_2,int_3,int_4,int_5,int_6]
        return interpolacion(datos_1, datos_2, a_berma )
    else:
        return 1

#Función interpolación compuesta tabla 9
def inter_compuesta_plan_ond(v2,tab_9x, terreno,p_pesados, l_sector):
    inf = intervalos(v2)[0]
    sup = intervalos(v2)[1]
    int_0y5_0 =  interpolacionp(tab_9x,terreno.get(0.5).get(inf),p_pesados)
    int_0y5_1 =  interpolacionp(tab_9x,terreno.get(0.5).get(sup),p_pesados)
    resultado_1 = interpolacionp([inf,sup],[int_0y5_0,int_0y5_1],v2)
    int_1_0 =  interpolacionp(tab_9x,terreno.get(1).get(inf),p_pesados)
    int_1_1 =  interpolacionp(tab_9x,terreno.get(1).get(sup),p_pesados)
    resultado_2 = interpolacionp([inf,sup],[int_1_0,int_1_1],v2)
    int_1_5_0 =  interpolacionp(tab_9x,terreno.get(1.5).get(inf),p_pesados)
    int_1_5_1 =  interpolacionp(tab_9x,terreno.get(1.5).get(sup),p_pesados)
    resultado_3 = interpolacionp([inf,sup],[int_1_5_0,int_1_5_1],v2)
    int_2_0 =  interpolacionp(tab_9x,terreno.get(2).get(inf),p_pesados)
    int_2_1 =  interpolacionp(tab_9x,terreno.get(2).get(sup),p_pesados)
    resultado_4 = interpolacionp([inf,sup],[int_2_0,int_2_1],v2)
    int_2_5_0 =  interpolacionp(tab_9x,terreno.get(2.5).get(inf),p_pesados) 
    int_2_5_1 =  interpolacionp(tab_9x,terreno.get(2.5).get(sup),p_pesados)
    resultado_5 = interpolacionp([inf,sup],[int_2_5_0,int_2_5_1],v2)
    int_3_0 =  interpolacionp(tab_9x,terreno.get(3).get(inf),p_pesados)
    int_3_1 =  interpolacionp(tab_9x,terreno.get(3).get(sup),p_pesados)
    resultado_6 = interpolacionp([inf,sup],[int_3_0,int_3_1],v2)
    int_3_5_0 =  interpolacionp(tab_9x,terreno.get(3.5).get(inf),p_pesados)
    int_3_5_1 =  interpolacionp(tab_9x,terreno.get(3.5).get(sup),p_pesados)
    resultado_7 = interpolacionp([inf,sup],[int_3_5_0,int_3_5_1],v2)
    datos_x =[0.5,1,1.5,2,2.5,3,3.5]
    datos = [resultado_1,resultado_2, resultado_3, resultado_4, resultado_5,
    resultado_6, resultado_7]
    return interpolacionp(datos_x, datos,l_sector)

def inter_compuesta_plan_ond2(v2,tabb_9x, terreno, p_pesados_lsector):
    inf = intervalos(v2)[0]
    sup = intervalos(v2)[1]


def inter_compuesta_mon_esc(v2,tab_9x, terreno,p_pesados, l_sector):
    inf = intervalos(v2)[0]
    sup = intervalos(v2)[1]
    int_0y5_0 =  interpolacionp(tab_9x,terreno.get(0.5).get(inf),p_pesados)
    int_0y5_1 =  interpolacionp(tab_9x,terreno.get(0.5).get(sup),p_pesados)
    resultado_1 = interpolacionp([inf,sup],[int_0y5_0,int_0y5_1],v2)
    int_1_0 =  interpolacionp(tab_9x,terreno.get(1).get(inf),p_pesados)
    int_1_1 =  interpolacionp(tab_9x,terreno.get(1).get(sup),p_pesados)
    resultado_2 = interpolacionp([inf,sup],[int_1_0,int_1_1],v2)
    int_1_5_0 =  interpolacionp(tab_9x,terreno.get(1.5).get(inf),p_pesados)
    int_1_5_1 =  interpolacionp(tab_9x,terreno.get(1.5).get(sup),p_pesados)
    resultado_3 = interpolacionp([inf,sup],[int_1_5_0,int_1_5_1],v2)
    int_2_0 =  interpolacionp(tab_9x,terreno.get(2).get(inf),p_pesados)
    int_2_1 =  interpolacionp(tab_9x,terreno.get(2).get(sup),p_pesados)
    resultado_4 = interpolacionp([inf,sup],[int_2_0,int_2_1],v2)
    int_2_5_0 =  interpolacionp(tab_9x,terreno.get(2.5).get(inf),p_pesados) 
    int_2_5_1 =  interpolacionp(tab_9x,terreno.get(2.5).get(sup),p_pesados)
    resultado_5 = interpolacionp([inf,sup],[int_2_5_0,int_2_5_1],v2)
    int_3_0 =  interpolacionp(tab_9x,terreno.get(3).get(inf),p_pesados)
    int_3_1 =  interpolacionp(tab_9x,terreno.get(3).get(sup),p_pesados)
    resultado_6 = interpolacionp([inf,sup],[int_3_0,int_3_1],v2)
    int_3_5_0 =  interpolacionp(tab_9x,terreno.get(3.5).get(inf),p_pesados)
    int_3_5_1 =  interpolacionp(tab_9x,terreno.get(3.5).get(sup),p_pesados)
    resultado_7 = interpolacionp([inf,sup],[int_3_5_0,int_3_5_1],v2)
    int_4_0 =  interpolacionp(tab_9x,terreno.get(4).get(inf),p_pesados)
    int_4_1 =  interpolacionp(tab_9x,terreno.get(4).get(sup),p_pesados)
    resultado_8 = interpolacionp([inf,sup],[int_4_0,int_4_1],v2)
    int_4_5_0 =  interpolacionp(tab_9x,terreno.get(4.5).get(inf),p_pesados)
    int_4_5_1 =  interpolacionp(tab_9x,terreno.get(4.5).get(sup),p_pesados)
    resultado_9 = interpolacionp([inf,sup],[int_4_5_0,int_4_5_1],v2)
    datos_x =[0.5,1,1.5,2,2.5,3,3.5,4,4.5]
    datos = [resultado_1,resultado_2, resultado_3, resultado_4, resultado_5,
    resultado_6, resultado_7,resultado_8,resultado_9]
    return interpolacionp(datos_x, datos,l_sector)

#Función para determinar el nivel de servicio según la velocidad media
def esta_en_rango(rango,numero):
    return numero in range(*rango)

def in_range(rango,numero):
    if numero >= rango[0] and numero <= rango[1]:
        return True
    else:
        return False

#Función para determinar el nivel de servicio según la tabla 11
def index(rango,num):
    indice = 0
    for element in rango:
        if in_range(element,num):
            indice = rango.index(element)
    if indice == 0:
        level = "A"
    elif indice == 1:
        level = "B"
    elif indice == 2:
        level = "C"
    elif indice == 3:
        level = "D"
    elif indice == 4:
        level = "E"
    else:
        level = "F"
    return level

#Datos de tabla 11
plano_1 = [[92,100],[80,92], [69,80], [58,69], [47,58], [0,47]]
ondulado_1 = [[76,100],[66,76],[57,66],[48,57],[38,48],[0,38]]
montanoso_1 = [[58,100],[50,58],[43,50],[37,43],[29,37],[0,29]]
escarpado_1 = [[40,100],[34,40],[30,34],[26,30],[20,26],[0,20]]

tabla_1 = {0:[1,1,1,1,1,1,1,1,1,1,1,1],
1:[0.99,0.99,0.99,0.99,0.98,0.98,0.98,0.98,0.98,0.98,0.98,0.98],
2:[0.99,0.98,0.98,0.98,0.97,0.97,0.97,0.97,0.97,0.97,0.97,0.97],
3:[0.98,0.97,0.96,0.96,0.95,0.95,0.95,0.95,0.95,0.95,0.95,0.95],
4:[0.98,0.96,0.95,0.94,0.94,0.94,0.93,0.93,0.93,0.93,0.93,0.93],
5:[0.98,0.95,0.94,0.92,0.92,0.92,0.92,0.92,0.91,0.91,0.91,0.91],
6:[0.97,0.95,0.92,0.91,0.91,0.90,0.90,0.90,0.89,0.89,0.89,0.89],
7:[0.96,0.93,0.91,0.89,0.89,0.87,0.87,0.87,0.86,0.86,0.86,0.86],
8:[0.96,0.92,0.89,0.87,0.86,0.85,0.84,0.84,0.84,0.84,0.84,0.84],
9:[0.94,0.89,0.85,0.83,0.82,0.81,0.80,0.80,0.80,0.80,0.80,0.80],
10:[0.92,0.85,0.81,0.79,0.78,0.77,0.76,0.75,0.75,0.74,0.74,0.74],
11:[0.90,0.81,0.76,0.73,0.72,0.71,0.70,0.69,0.69,0.68,0.68,0.68],
12:[0.87,0.76,0.71,0.68,0.67,0.64,0.64,0.63,0.63,0.61,0.61,0.61]}
tabla_1x = [0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6]

tabla_2 = {50:[1,1,1,1,1,1],60:[0.9,0.89,0.87,0.86,0.85,0.83],70:[0.82,0.8,0.78,0.76,0.74,0.7],
80:[0.75,0.72,0.7,0.67,0.65,0.63],90:[0.69,0.66,0.64,0.61,0.58,0.56],100:[0.64,0.61,0.58,0.56,0.53,0.5]}
tabla_2x = [0,20,40,60,80,100]

tabla_3 = {1.8:[1,0.99,0.98,0.96], 1.5:[0.99,0.99,0.98,0.95], 1.2:[0.99,0.98,0.97,0.95],
 1:[0.99,0.98,0.97,0.94],0.5:[0.98,0.97,0.96,0.93],0:[0.97,0.96,0.95,0.92]}
tabla_3x = [3.65, 3.5, 3.3, 3.0]

tabla_4 = [{0.5:[1.53,1.56,1.5,1.48,1.47,1.47], 1:[1.53,1.56,1.5,1.48,1.47,1.47], 1.5:[1.53,1.56,1.5,1.48,1.47,1.47],
2:[1.53,1.56,1.5,1.48,1.47,1.47],3:[1.53,1.56,1.5,1.48,1.47,1.47], 4:[1.53,1.56,1.5,1.48,1.47,1.47], 5:[1.53,1.56,1.5,1.48,1.47,1.47]},
{0.5:[1.53,1.56,1.5,1.48,1.47,1.47],1:[1.64,1.62,1.54,1.51,1.50,1.50], 1.5:[1.75,1.68,1.59,1.55,1.50,1.50], 2:[1.87,1.75,1.59,1.55,1.53,1.53],
3:[1.99,1.75,1.63,1.55,1.53,1.53],4:[1.99,1.75,1.63,1.59,1.56,1.56],5:[2.11,1.75,1.68,1.59,1.56,1.56]},{0.5:[1.64,1.56,1.59,1.51,1.50,1.50],
1:[1.75,1.68,1.59,1.55,1.53,1.53],1.5:[1.87,1.68,1.63,1.59,1.53,1.53],2:[2.11,1.81,1.68,1.63,1.56,1.56],3:[2.36,1.88,1.73,1.66,1.63,1.62],
4:[2.49,1.95,1.78,1.71,1.67,1.65],5:[2.63,2.02,1.83,1.75,1.70,1.65]},{0.5:[1.64,1.62,1.63,1.59,1.56,1.56],1:[1.87,1.75,1.68,1.63,1.60,1.56],
1.5:[2.24,1.88,1.78,1.71,1.67,1.62],2:[2.49,2.02,1.83,1.75,1.7,1.68],3:[2.63,2.1,1.89,1.79,1.74,1.71],4:[2.76,2.17,1.94,1.83,1.78,1.71],
5:[2.9,2.25,1.94,1.83,1.78,1.75]},{0.5:[1.75,1.68,1.68,1.63,1.63,1.59],1:[2.24,2.02,1.83,1.75,1.7,1.68],1.5:[2.9,2.17,2,1.88,1.78,1.75],
2:[3.05,2.33,2.05,1.92,1.86,1.78],3:[3.2,2.41,2.11,2.02,1.94,1.86],4:[3.35,2.49,2.17,2.02,1.94,1.9],5:[3.5,2.49,2.23,2.07,1.99,1.94]},
{0.5:[1.87,1.81,1.73,1.71,1.67,1.62],1:[2.76,2.25,2,1.88,1.82,1.75],1.5:[3.2,2.41,2.11,2.02,1.9,1.9],2:[3.5,2.49,2.23,2.07,1.99,1.99],
3:[3.66,2.67,2.3,2.12,2.03,1.98],4:[3.82,2.76,2.36,2.18,2.08,2.02],5:[3.99,2.76,2.43,2.23,2.13,2.02]},{0.5:[2.11,1.95,1.86,1.79,1.74,1.71],
1:[3.35,2.49,2.23,2.07,1.99,1.9],1.5:[3.66,2.67,2.36,2.18,2.08,1.98],2:[3.99,2.76,2.43,2.23,2.13,2.02],3:[4.16,2.94,2.5,2.29,2.17,2.07],
4:[4.33,2.94,2.57,2.35,2.17,2.11],5:[4.33,3.04,2.64,2.41,2.23,2.16]},{0.5:[2.24,2.1,1.94,1.88,1.82,1.78],1:[3.82,2.76,2.36,2.23,2.13,2.07],
1.5:[4.16,2.94,2.57,2.35,2.23,2.16],2:[4.51,3.14,2.64,2.47,2.33,2.26],3:[4.89,3.35,2.64,2.60,2.45,2.31],4:[5.08,3.46,2.88,2.67,2.51,2.36],
5:[5.08,3.46,2.96,2.67,2.51,2.42]},{0.5:[2.49,2.17,2.05,1.92,1.86,1.82],1:[4.16,2.94,2.57,2.35,2.23,2.16],1.5:[4.7,3.25,2.79,2.53,2.39,2.31],
2:[5.08,3.46,2.96,2.67,2.51,2.48],3:[5.49,3.69,3.13,2.81,2.64,2.48],4:[5.71,3.81,3.22,2.89,2.7,2.54],5:[5.93,3.94,3.22,2.96,2.77,2.6]},
{0.5:[2.63,2.33,2.17,2.02,1.94,1.9],1:[4.51,3.14,2.64,2.41,2.33,2.21],1.5:[5.08,3.46,2.88,2.67,2.51,2.36],2:[5.29,3.58,3.04,2.74,2.57,2.48],
3:[5.71,3.81,3.22,2.89,2.7,2.6],4:[5.93,3.94,3.32,2.96,2.77,2.67],5:[6.15,4.06,3.41,3.05,2.85,2.67]},{0.5:[3.05,2.58,2.3,2.18,2.08,2.16],
1:[5.29,3.58,3.04,2.74,2.57,2.54],1.5:[5.71,3.81,3.13,2.81,2.64,2.67],2:[6.15,4.06,3.41,3.05,2.85,2.81],3:[6.38,4.2,3.51,3.13,2.92,2.88],
4:[6.63,4.33,3.62,3.22,3,2.96],5:[6.87,4.47,3.73,3.31,3.08,3.04]},{0.5:[3.66,2.94,2.57,2.35,2.23,2.16],1:[5.49,3.69,3.13,2.81,2.64,2.54],
1.5:[6.15,4.06,3.41,3.05,2.85,2.67],2:[6.63,4.33,3.51,3.13,2.92,2.81],3:[6.87,4.47,3.73,3.31,3.08,2.88],4:[7.13,4.62,3.84,3.4,3.17,2.96],
5:[7.39,4.77,3.96,3.5,3.26,3.04]},{0.5:[3.99,3.25,2.79,2.53,2.39,2.31],1:[6.15,4.06,3.32,3.05,2.85,2.67],1.5:[6.63,4.33,3.62,3.22,3,2.81],
2:[7.13,4.62,3.73,3.31,3.08,2.96],3:[7.39,4.77,3.96,3.5,3.17,3.04],4:[7.67,4.93,3.96,3.6,3.26,3.12],5:[7.95,5.09,4.08,3.6,3.35,3.21]}]
tabla_4x=[10, 20, 30, 40, 50, 60]

tabla_5 = [100,200,300,400,600,800,1000,1200]
tabla_5x = [0.68,0.7,0.72,0.74,0.78,0.81,0.84,0.86]
tabla_51 =[1400,1600,1800,2000,2200,2400,2600,2800]
tabla_51x = [0.89,0.9,0.92,0.93,0.95,0.95,0.96,0.97]

tabla_6 = {0:[90,90,90,90,90,90,90,90,90,90,90,90], 1:[88,86,86,86,85,85,85,85,85,85,85,85], 2:[86,82,81,81,80,80,80,80,80,80,80,80],
3:[83,79,77,76,75,75,75,75,75,75,75,75],4:[82,77,74,72,70,70,69,69,69,69,68,68],5:[81,74,70,68,66,66,65,65,64,64,64,64],6:[80,73,67,65,63,62,61,61,60,60,60,60],
7:[78,69,63,60,59,56,55,55,54,54,54,54],8:[76,66,60,55,54,52,51,51,50,50,49,49],9:[70,59,52,49,48,46,44,44,43,43,43,43],
10:[66,52,46,42,41,40,39,38,38,37,37,37],11:[61,46,39,38,35,34,33,31,31,30,30,30],12:[55,39,34,30,29,27,27,26,26,25,25,25]}
tabla_6x = [0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6]

tabla_7 = [0.99,0.98,0.96,0.92,0.87,0.82,0.75,0.68,0.59,0.50]
tabla_7x = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]

tabla_8 = {1.8:[1,0.97,0.93,0.85,0.73], 1.5:[0.98,0.95,0.91,0.83,0.71], 1.2:[0.96,0.93,0.89,0.81,0.7], 1:[0.95,0.92,0.88,0.8,0.69],
0.5:[0.91,0.88,0.84,0.76,0.66], 0:[0.88,0.85,0.81,0.73,0.63]}
tabla_8x = [3.65, 3.5, 3.3, 3, 2.7]

tabla_9x = [10,20,30,40,50,60,70,80,90,100]
plano = {0.5:{40:[1.00, 1.00, 1.04, 1.10, 1.12, 1.13, 1.14, 1.13, 1.14, 1.14], 50:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
60:[1.01,1.16,1.18,1.20,1.21,1.21,1.20,1.19,1.19,1.18],70:[1.43,1.42,1.36,1.34,1.32,1.30,1.28,1.27,1.26,1.24], 
80:[1.86,1.65,1.52,1.46,1.42,1.38,1.36,1.33,1.31,1.30],90:[2.16,1.80,1.62,1.54,1.49,1.44,1.40,1.37,1.35,1.33]},
1:{40:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],50:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
60:[1.09,1.21,1.22,1.23,1.24,1.23,1.22,1.21,1.20,1.20],70:[1.67,1.54,1.45,1.41,1.38,1.35,1.32,1.30,1.29,1.27],
80:[2.26,1.85,1.66,1.57,1.51,1.46,1.42,1.39,1.36,1.34],90:[2.57,2.02,1.77,1.65,1.58,1.52,1.47,1.43,1.41,1.38]},
1.5:{40:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],50:[1.00,1.00,1.05,1.10,1.13,1.14,1.14,1.14,1.14,1.14],
60:[1.13,1.23,1.23,1.24,1.24,1.23,1.22,1.21,1.21,1.20],70:[1.79,1.61,1.49,1.44,1.41,1.37,1.34,1.32,1.30,1.29],
80:[2.50,1.98,1.74,1.63,1.56,1.50,1.46,1.42,1.40,1.37],90:[2.93,2.20,1.89,1.75,1.66,1.59,1.53,1.48,1.45,1.42]},
2:{40:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],50:[1.00,1.02,1.06,1.11,1.14,1.14,1.15,1.14,1.15,1.14],
60:[1.13,1.23,1.23,1.24,1.24,1.23,1.22,1.21,1.21,1.20],70:[1.84,1.63,1.51,1.45,1.42,1.38,1.35,1.32,1.31,1.29],
80:[2.50,1.98,1.74,1.63,1.56,1.50,1.46,1.42,1.40,1.37],90:[2.99,2.23,1.91,1.77,1.67,1.60,1.54,1.49,1.46,1.43]},
2.5:{40:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],50:[1.00,1.02,1.06,1.11,1.14,1.14,1.15,1.14,1.15,1.14],
60:[1.13,1.23,1.23,1.24,1.24,1.23,1.22,1.21,1.21,1.20],70:[1.84,1.63,1.51,1.45,1.42,1.38,1.35,1.32,1.31,1.29],
80:[2.60,2.03,1.78,1.66,1.58,1.52,1.48,1.43,1.41,1.38],90:[3.04,2.26,1.93,1.78,1.68,1.61,1.55,1.50,1.47,1.44]},
3:{40:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],50:[1.00,1.02,1.06,1.11,1.14,1.14,1.15,1.14,1.15,1.14],
60:[1.13,1.23,1.23,1.24,1.24,1.23,1.22,1.21,1.21,1.20],70:[1.84,1.63,1.51,1.45,1.42,1.38,1.35,1.32,1.31,1.29],
80:[2.65,2.06,1.79,1.67,1.60,1.53,1.48,1.44,1.42,1.39],90:[3.09,2.28,1.95,1.79,1.69,1.62,1.53,1.51,1.47,1.44]},
3.5:{40:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],50:[1.00,1.02,1.06,1.11,1.14,1.14,1.15,1.14,1.15,1.14],
60:[1.13,1.23,1.23,1.24,1.24,1.23,1.22,1.21,1.21,1.20],70:[1.84,1.63,1.51,1.45,1.42,1.38,1.35,1.32,1.31,1.29],
80:[2.65,2.06,1.79,1.67,1.60,1.53,1.48,1.44,1.42,1.39],90:[3.09,2.28,1.95,1.79,1.69,1.62,1.56,1.51,1.47,1.44]}}
ondulado = {0.5:{20:[1.00, 1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
40:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],50:[1.01,1.12,1.16,1.19,1.20,1.19,1.19,1.18,1.18,1.18],
60:[1.51,1.46,1.39,1.36,1.34,1.32,1.30,1.28,1.27,1.25],70:[2.03,1.74,1.58,1.51,1.46,1.42,1.38,1.35,1.34,1.32],
80:[2.57,2.01,1.77,1.65,1.58,1.52,1.47,1.43,1.41,1.31]},1:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],40:[1.00,1.00,1.05,1.10,1.13,1.14,1.14,1.14,1.14,1.14],
50:[1.24,1.29,1.27,1.27,1.27,1.26,1.24,1.23,1.22,1.20],60:[2.14,1.79,1.61,1.53,1.48,1.44,1.40,1.37,1.35,1.33],
70:[2.88,2.17,1.87,1.74,1.65,1.58,1.52,1.48,1.45,1.42],80:[3.68,2.59,2.16,1.95,1.83,1.73,1.65,1.59,1.55,1.51],
80:[3.68,2.59,2.16,1.95,1.83,1.73,1.65,1.59,1.55,1.51]},1.5:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],40:[1.00,1.03,1.08,1.12,1.14,1.15,1.15,1.15,1.15,1.15],
50:[1.44,1.43,1.37,1.35,1.33,1.31,1.29,1.27,1.26,1.25],60:[2.45,1.95,1.72,1.62,1.55,1.50,1.45,1.41,1.39,1.37],
70:[3.44,2.47,2.07,1.89,1.77,1.68,1.61,1.56,1.52,1.48],80:[4.31,2.92,2.38,2.13,1.97,1.85,1.76,1.68,1.63,1.59]},
2:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
40:[1.00,1.03,1.08,1.12,1.14,1.15,1.15,1.15,1.15,1.15],50:[1.48,1.45,1.38,1.36,1.34,1.31,1.29,1.27,1.26,1.25],
60:[2.54,2.00,1.76,1.65,1.57,1.51,1.47,1.43,1.40,1.38],70:[3.50,2.50,2.10,1.91,1.79,1.69,1.62,1.57,1.53,1.49],
80:[4.44,2.98,2.43,2.16,1.99,1.87,1.78,1.70,1.65,1.60]},2.5:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],40:[1.00,1.05,1.09,1.13,1.15,1.16,1.16,1.15,1.15,1.15],
50:[1.52,1.47,1.39,1.37,1.35,1.32,1.30,1.28,1.27,1.26],60:[2.60,2.03,1.78,1.66,1.58,1.52,1.48,1.43,1.41,1.38],
70:[3.67,2.58,2.15,1.95,1.82,1.73,1.65,1.59,1.55,1.51],80:[4.63,3.08,2.50,2.21,2.04,1.91,1.81,1.73,1.68,1.63]},
3:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
40:[1.00,1.05,1.09,1.13,1.15,1.16,1.16,1.15,1.15,1.15],50:[1.57,1.49,1.41,1.38,1.35,1.33,1.31,1.29,1.27,1.26],
60:[2.69,2.07,1.81,1.68,1.60,1.54,1.49,1.45,1.42,1.39],70:[3.72,2.61,2.17,1.97,1.84,1.74,1.66,1.60,1.56,1.52],
80:[4.63,3.08,2.50,2.21,2.04,1.91,1.81,1.73,1.68,1.63]},3.5:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],40:[1.01,1.07,1.10,1.14,1.16,1.16,1.16,1.16,1.16,1.16],
50:[1.57,1.49,1.41,1.38,1.35,1.33,1.31,1.29,1.27,1.26],60:[2.74,2.10,1.83,1.70,1.62,1.55,1.50,1.46,1.43,1.40],
70:[3.84,2.68,2.22,2.00,1.86,1.76,1.68,1.62,1.57,1.53],80:[4.69,3.12,2.52,2.23,2.05,1.92,1.82,1.74,1.68,1.63]}}
montanoso = {0.5:{20:[1.00, 1.00, 1.04, 1.10, 1.12, 1.13, 1.14, 1.13,1.14,1.14],30:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
40:[1.24,1.27,1.26,1.26,1.26,1.25,1.24,1.22,1.22,1.21],50:[2.09,1.76,1.60,1.52,1.47,1.43,1.39,1.36,1.34,1.32],
60:[2.82,2.14,1.86,1.72,1.63,1.57,1.51,1.47,1.44,1.41],70:[3.60,2.55,2.13,1.93,1.81,1.71,1.64,1.58,1.54,1.50],
80:[4.31,2.92,2.38,2.13,1.97,1.85,1.76,1.68,1.63,1.59]},1:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.01,1.07,1.10,1.14,1.16,1.16,1.16,1.16,1.16,1.16],40:[2.07,1.75,1.59,1.52,1.47,1.42,1.39,1.36,1.34,1.32],
50:[3.46,2.48,2.08,1.89,1.79,1.69,1.62,1.56,1.52,1.49],60:[4.65,3.10,2.50,2.22,2.04,1.91,1.81,1.73,1.68,1.63],
70:[5.69,3.64,2.87,2.50,2.27,2.11,1.98,1.88,1.81,1.75],80:[6.64,4.13,3.21,2.76,2.49,2.29,2.14,2.02,1.94,1.87]},
1.5:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],30:[1.12,1.13,1.15,1.18,1.19,1.19,1.19,1.18,1.18,1.17],
40:[2.33,1.89,1.68,1.59,1.53,1.47,1.43,1.40,1.37,1.35],50:[3.74,2.62,2.18,1.97,1.84,1.74,1.66,1.60,1.56,1.52],
60:[4.91,3.23,2.60,2.29,2.10,1.96,1.86,1.77,1.71,1.66],70:[6.07,3.83,3.01,2.61,2.36,2.18,2.05,1.94,1.86,1.80],
80:[6.90,4.26,3.30,2.83,2.54,2.34,2.18,2.06,1.97,1.90]},2:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.16,1.16,1.18,1.20,1.21,1.20,1.20,1.19,1.19,1.18],40:[2.43,1.94,1.72,1.61,1.55,1.49,1.45,1.41,1.39,1.36],
50:[3.86,2.68,2.22,2.00,1.87,1.76,1.68,1.62,1.57,1.53],60:[5.12,3.34,2.67,2.35,2.15,2.00,1.89,1.80,1.74,1.68],
70:[6.16,3.88,3.04,2.63,2.38,2.20,2.06,1.95,1.88,1.81],80:[7.17,4.41,3.40,2.91,2.60,2.39,2.23,2.10,2.01,1.93]},
2.5:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],30:[1.19,1.20,1.20,1.22,1.22,1.22,1.21,1.20,1.20,1.19],
40:[2.53,1.99,1.75,1.64,1.57,1.51,1.46,1.43,1.40,1.38],50:[4.04,2.78,2.29,2.05,1.91,1.80,1.71,1.64,1.60,1.56],
60:[5.25,3.41,2.72,2.38,2.18,2.02,1.91,1.82,1.76,1.70],70:[6.31,3.96,3.09,2.67,2.41,2.22,2.09,1.97,1.90,1.83],
80:[7.17,4.41,3.40,2.91,2.60,2.39,2.23,2.10,2.01,1.93]},3:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.23,1.22,1.22,1.23,1.23,1.22,1.22,1.21,1.20,1.19],40:[2.53,1.99,1.75,1.64,1.57,1.51,1.46,1.43,1.40,1.38],
50:[4.04,2.78,2.29,2.05,1.91,1.80,1.71,1.64,1.60,1.56],60:[5.33,3.45,2.74,2.40,2.19,2.04,1.92,1.83,1.77,1.71],
70:[6.31,3.96,3.09,2.67,2.41,2.22,2.09,1.97,1.90,1.83],80:[7.17,4.41,3.40,2.91,2.60,2.39,2.23,2.10,2.01,1.93]},
3.5:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],30:[1.23,1.22,1.22,1.23,1.23,1.22,1.22,1.21,1.20,1.19],
40:[2.62,2.04,1.79,1.67,1.59,1.53,1.48,1.44,1.41,1.39],50:[4.09,2.80,2.30,2.07,1.92,1.80,1.72,1.62,1.60,1.56],
60:[5.33,3.45,2.74,2.40,2.19,2.04,1.92,1.83,1.77,1.71],70:[6.40,4.01,3.12,2.70,2.43,2.24,2.10,1.99,1.91,1.84],
80:[7.25,4.45,3.43,2.93,2.62,2.40,2.24,2.11,2.02,1.94]},4:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
30:[1.23,1.24,1.23,1.24,1.24,1.23,1.22,1.21,1.21,1.20],40:[2.67,2.07,1.80,1.68,1.60,1.54,1.49,1.45,1.42,1.39],
50:[4.16,2.84,2.33,2.09,1.93,1.82,1.73,1.66,1.61,1.57],60:[5.40,3.49,2.77,2.42,2.21,2.05,1.94,1.84,1.78,1.72],
70:[6.49,4.05,3.15,2.72,2.45,2.26,2.12,2.00,1.92,1.85],80:[7.35,4.50,3.46,2.95,2.64,2.42,2.26,2.13,2.03,1.95]},
4.5:{20:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],30:[1.23,1.24,1.23,1.24,1.24,1.23,1.22,1.21,1.21,1.20],
40:[2.67,2.07,1.80,1.68,1.60,1.54,1.49,1.45,1.42,1.39],50:[4.16,2.84,2.33,2.09,1.93,1.82,1.73,1.66,1.61,1.57],
60:[5.40,3.49,2.77,2.42,2.21,2.05,1.94,1.84,1.78,1.72],70:[6.49,4.05,3.15,2.72,2.45,2.26,2.12,2.00,1.92,1.85],
80:[7.45,4.55,3.50,2.98,2.67,2.44,2.27,2.14,2.05,1.96]}}
escarpado = {0.5:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],20:[1.03,1.07,1.10,1.14,1.16,1.16,1.16,1.16,1.16,1.15],
30:[2.10,1.77,1.60,1.52,1.47,1.43,1.39,1.36,1.34,1.32],40:[3.81,2.66,2.20,1.99,1.85,1.75,1.67,1.61,1.57,1.53],
50:[5.23,3.40,2.71,2.38,2.17,2.02,1.91,1.82,1.75,1.70],60:[6.36,3.99,3.11,2.69,2.42,2.23,2.09,1.98,1.90,1.82],
70:[6.86,4.25,3.29,2.82,2.54,2.33,2.18,2.05,1.97,1.89]},1:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
20:[1.43,1.32,1.28,1.28,1.27,1.26,1.25,1.23,1.23,1.22],30:[3.52,2.51,2.10,1.91,1.79,1.70,1.63,1.57,1.53,1.49],
40:[5.36,3.46,2.75,2.41,2.20,2.04,1.93,1.84,1.77,1.71],50:[6.89,4.26,3.30,2.83,2.51,2.33,2.18,2.06,1.97,1.90],
60:[8.01,4.84,3.69,3.13,2.79,2.54,2.36,2.22,2.12,2.03],70:[8.50,5.10,3.87,3.27,2.90,2.64,2.45,2.29,2.18,2.09]},
1.5:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],20:[1.72,1.50,1.41,1.38,1.35,1.33,1.30,1.28,1.27,1.26],
30:[3.98,2.75,2.26,2.04,1.89,1.78,1.70,1.64,1.59,1.54],40:[5.81,3.70,2.91,2.53,2.30,2.13,2.00,1.90,1.83,1.77],
50:[7.29,4.47,3.44,2.94,2.63,2.41,2.25,2.12,2.02,1.94],60:[8.47,5.08,3.86,3.26,2.89,2.63,2.44,2.29,2.18,2.08],
70:[9.00,5.36,4.04,3.40,3.01,2.73,2.53,2.37,2.25,2.15]},2:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
20:[1.83,1.58,1.46,1.42,1.39,1.36,1.33,1.31,1.29,1.28],30:[4.27,2.90,2.37,2.11,1.96,1.84,1.75,1.68,1.63,1.58],
40:[6.10,3.85,3.02,2.61,2.36,2.18,2.05,1.94,1.87,1.80],50:[7.65,4.65,3.56,3.04,2.71,2.48,2.31,2.17,2.07,1.99],
60:[8.80,5.25,3.97,3.35,2.97,2.70,2.50,2.34,2.22,2.12],70:[9.27,5.50,4.14,3.48,3.07,2.78,2.57,2.40,2.28,2.18]},
2.5:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],20:[1.93,1.63,1.50,1.44,1.41,1.37,1.35,1.32,1.31,1.29],
30:[4.39,2.96,2.41,2.15,1.99,1.86,1.77,1.70,1.64,1.60],40:[6.28,3.94,3.08,2.66,2.41,2.22,2.08,1.97,1.89,1.82],
50:[7.72,4.69,3.59,3.06,2.73,2.49,2.32,2.18,2.08,2.00],60:[8.87,5.29,4.00,3.37,2.98,2.71,2.51,2.35,2.23,2.13],
70:[9.35,5.54,4.17,3.50,3.09,2.80,2.59,2.42,2.29,2.19]},3:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
20:[2.07,1.70,1.55,1.48,1.44,1.40,1.37,1.34,1.32,1.31],30:[4.50,3.02,2.45,2.18,2.01,1.88,1.79,1.71,1.66,1.61],
40:[6.34,3.97,3.10,2.68,2.42,2.23,2.09,1.98,1.90,1.83],50:[7.87,4.77,3.65,3.10,2.76,2.52,2.34,2.20,2.10,2.01],
60:[8.96,5.34,4.03,3.39,3.00,2.73,2.52,2.36,2.24,2.14],70:[9.44,5.58,4.20,3.52,3.11,2.81,2.60,2.43,2.31,2.20]},
3.5:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],20:[2.07,1.70,1.55,1.48,1.44,1.40,1.37,1.34,1.32,1.31],
30:[1.55,3.04,2.47,2.19,2.02,1.89,1.80,1.72,1.67,1.62],40:[6.54,4.08,3.17,2.73,2.46,2.27,2.12,2.01,1.93,1.85],
50:[7.94,4.81,3.67,3.12,2.78,2.53,2.35,2.21,2.11,2.02],60:[9.06,5.39,4.07,3.42,3.03,2.74,2.54,2.37,2.26,2.16],
60:[9.06,5.39,4.07,3.42,3.03,2.74,2.54,2.37,2.26,2.16],70:[9.54,5.64,4.23,3.55,3.13,2.83,2.62,2.44,2.32,2.21]},
4:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],20:[2.13,1.74,1.57,1.50,1.45,1.41,1.38,1.35,1.33,1.31],
30:[4.63,3.09,2.50,2.21,2.04,1.91,1.81,1.73,1.68,1.63],40:[6.59,4.11,3.19,2.75,2.48,2.28,2.13,2.02,1.93,1.86],
50:[8.02,4.85,3.70,3.14,2.79,2.55,2.37,2.22,2.12,2.03],60:[9.22,5.47,4.12,3.46,3.06,2.77,2.56,2.40,2.28,2.17],
70:[9.63,5.68,4.27,3.59,3.15,2.85,2.63,2.46,2.33,2.22]},4.5:{10:[1.00,1.00,1.04,1.10,1.12,1.13,1.14,1.13,1.14,1.14],
20:[2.17,1.76,1.58,1.51,1.46,1.42,1.39,1.36,1.34,1.32],30:[4.69,3.12,2.52,2.23,2.05,1.92,1.82,1.74,1.68,1.63],
40:[6.59,4.11,3.19,2.75,2.48,2.28,2.13,2.02,1.93,1.86],50:[8.02,4.85,3.70,3.14,2.79,2.55,2.37,2.22,2.12,2.03],
60:[9.22,5.47,4.12,3.46,3.06,2.77,2.56,2.40,2.28,2.17],70:[9.22,5.47,4.12,3.46,3.06,2.77,2.56,2.40,2.28,2.17]}} 

tabla_10x = [0,2.5,4,6,8]
tabla_10 = [1.00,0.99,0.99,0.98,0.97]



# print('Bienvenido al sistema de cálculo de capacidad')
# print('Ingrese información de la vía: ')
# Ruta = input('Identificación de la ruta: ')
# Tramo = input('Nombre del tramo: ')
# Sector = input('Nombre del sector: ')
# Abscisa = input('Ingrese abscisado del tramo: ')

# # print('Ingrese características de la vía: ')
# a_carril = float(input('Ingrese el ancho de carril (metros): '))
# a_berma = float(input('Ingrese ancho de berma (metros): '))
# p_promedio = float(input('Ingrese pendiente promedio del terreno (%): '))
# print(tipo_terreno(p_promedio))
# l_sector = float(input('Longitud del sector (km): '))


# print('Ingrese características del transito: ')
# d_sentido = int(input('¿Cuál es la distribución por sentido?: '))
# p_no_rebase = int(input('¿Cuál es el procentaje de zonas de no rebase? (%): '))

# #Composición vehicular
# p_autos = int(input('Porcentaje de automóviles: '))
# p_buses = int(input('Porcentaje de buses: '))
# p_camiones = int(input('Porcentaje de camiones: '))
# vol_cap = int(input('Ingrese el volumen horario total ambos sentidos (veh/h) (Q): '))
# p_pesados = p_buses+p_camiones
# c_ideal = 3200

# #Capacidad
# Fpe = inter_compuesta_1(p_promedio, tabla_1x, tabla_1, l_sector)
# Fd = inter_compuesta_2(d_sentido,tabla_2x,tabla_2,p_no_rebase)
# Fcb = inter_compuesta3(tabla_3x,tabla_3,a_berma,a_carril)
# Ec = inter_compuesta4(tabla_4x, tabla_4, p_promedio, p_pesados, l_sector)
# Fp = (1/(1+(p_pesados/100)*(Ec-1)))
# Fp = round(Fp,4)
# cap_60 = round(c_ideal*Fpe*Fd*Fcb*Fp,0)
# FHP = inter_tabla5(tabla_5,tabla_5x,tabla_51,tabla_51x,cap_60)
# cap_5 =round(cap_60*FHP,0)
# #Nivel de servico
# v1 = inter_compuesta6(tabla_6x, tabla_6, p_promedio, l_sector)
# Fu = interpolacion(tabla_7x,tabla_7,vol_cap/cap_60)
# Fcb = inter_compuesta8(tabla_8x,tabla_8,a_carril,a_berma)
# v2 = v1* Fu * Fcb
# print(v2)
# Ec_vel = 0
# if p_promedio < 3:
#     Ec_vel = inter_compuesta_plan_ond(v2,tabla_9x,plano,p_camiones,l_sector)
# elif  p_promedio < 6:
#     Ec_vel = inter_compuesta_plan_ond(v2,tabla_9x,ondulado,p_camiones,l_sector)
# elif  p_promedio <9:
#     Ec_vel = inter_compuesta_mon_esc(v2,tabla_9x,montanoso,p_camiones,l_sector)
# else:
#     Ec_vel = inter_compuesta_mon_esc(v2,tabla_9x,escarpado,p_camiones,l_sector)

# fp_vel = round(1/(1+((p_camiones/100)*(Ec_vel-1))),3)
# Ft = round(interpolacion(tabla_10x, tabla_10, p_promedio),3)
# vM = v2*fp_vel*Ft
# Vi = int((vM * 100)/90)

# lista =[]
# if p_promedio < 3:
#     lista = plano_1
# elif  p_promedio < 6:
#     lista = ondulado_1
# elif  p_promedio <9:
#     lista = montanoso_1
# else:
#     lista = escarpado_1

# print(f'Fpe= {Fpe}, Fd= {Fd},  Fcb= {Fcb}, Ec ={Ec} y Fp = {Fp} y Ec_vel = {Ec_vel} y FHP = {FHP}')
# print(f'Composición buses + camiones: {p_pesados} %  ')
# print(f'La capacidad de la vía es: {cap_60} Veh/h')
# print(f'La capacidad de la vía de los cinco minutos es: {cap_5} Veh/h')
# final = index(lista, Vi)
# print(f"ft = {Ft}, vM = {vM} y Vi = {Vi} and v1 = {v1}, Fu={Fu}, Ft = {Ft} v2 = {v2}")
# print(f"El nivel de servicio es {final}")
